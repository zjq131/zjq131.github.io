<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Blog源码学习</title>
    <link href="/2022/12/06/index/"/>
    <url>/2022/12/06/index/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前端"><a href="#1-前端" class="headerlink" title="1.前端"></a>1.前端</h1><h3 id="1-路由组件"><a href="#1-路由组件" class="headerlink" title="1.路由组件"></a>1.路由组件</h3><h5 id="1-懒加载子组件与直接加载父组件（按角色权限加载菜单组件）"><a href="#1-懒加载子组件与直接加载父组件（按角色权限加载菜单组件）" class="headerlink" title="1.懒加载子组件与直接加载父组件（按角色权限加载菜单组件）"></a>1.懒加载子组件与直接加载父组件（按角色权限加载菜单组件）</h5><h3 id="2-App-vue"><a href="#2-App-vue" class="headerlink" title="2.App.vue"></a>2.App.vue</h3><ul><li>```java<br>1.create()： 1.重新加载用户菜单 /api/admin/user/menus  2.登录的游客信息 /report<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><span class="hljs-comment">### 3.Login.vue</span><br><br>- ```java<br>  <span class="hljs-number">1</span>.填写完登录信息过后发送请求：<span class="hljs-regexp">/api/</span>login<br>  <span class="hljs-number">2</span>.成功收到信息过后发送请求：<span class="hljs-regexp">/api/</span>admin<span class="hljs-regexp">/user/m</span>enus 第一次请求用户菜单信息（并将用户信息存入仓库中）<br>  <span class="hljs-number">3</span>.重定向到: / (前端路由)  <br></code></pre></td></tr></table></figure></li></ul><h3 id="4-Home-vue"><a href="#4-Home-vue" class="headerlink" title="4.Home.vue"></a>4.Home.vue</h3><ul><li>```javascript<br>create():  /api/admin  :   /api/admin/users/area<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### <span class="hljs-number">5.</span>article<br><br>##### <span class="hljs-number">1.</span>Article.vue<br><br>###### <span class="hljs-number">1.</span>  点击发表按钮<br><br>- ```java<br>  /api/admin/categories/search<br>  /api/admin/tags/search<br></code></pre></td></tr></table></figure></li></ul><h6 id="2-上传封面"><a href="#2-上传封面" class="headerlink" title="2.上传封面"></a>2.上传封面</h6><ul><li>```java<br>上传自己的本地文件到服务器上  /admin/articles/images<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><br><span class="hljs-comment">###### 3.保存</span><br><br>- ```java<br>  post <span class="hljs-symbol">:/api/admin/articles</span>  保存文章  删除本地存储的草稿文件：sessionStorage.removeItem(<span class="hljs-string">&quot;article&quot;</span>);<br>  成功后跳转页面：/article-list <br></code></pre></td></tr></table></figure></li></ul><h5 id="2-ArticleList-vue"><a href="#2-ArticleList-vue" class="headerlink" title="2.ArticleList.vue"></a>2.ArticleList.vue</h5><h6 id="1-初始化（created）"><a href="#1-初始化（created）" class="headerlink" title="1.初始化（created）"></a>1.初始化（created）</h6><ul><li>```java<br>this.listArticles(); get  /api/admin/articles<br>this.listCategories(); get<br>this.listTags(); get<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>###### <span class="hljs-number">2.</span>编辑<br><br>- ```<br>  点击编辑时，带着文章参数跳转到 article.vue页面<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-role"><a href="#6-role" class="headerlink" title="6.role"></a>6.role</h3><h5 id="1-Role-vue"><a href="#1-Role-vue" class="headerlink" title="1.Role.vue"></a>1.Role.vue</h5><ul><li>```java<br>/api/admin/users/roles<br>/api/admin/role/resources<br>/api/admin/role/menus<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### <span class="hljs-number">7.</span>user<br><br>##### <span class="hljs-number">1.</span>Online.vue<br><br>- ```java<br>  /api/admin/users/online  请求在线用户列表<br>      <br></code></pre></td></tr></table></figure></li></ul><h1 id="2-后端"><a href="#2-后端" class="headerlink" title="2.后端"></a>2.后端</h1><h3 id="1-无关业务逻辑的类与注解"><a href="#1-无关业务逻辑的类与注解" class="headerlink" title="1.无关业务逻辑的类与注解"></a>1.无关业务逻辑的类与注解</h3><h5 id="1-handler"><a href="#1-handler" class="headerlink" title="1.handler"></a>1.handler</h5><h6 id="1-WebSecurityHandler"><a href="#1-WebSecurityHandler" class="headerlink" title="1.WebSecurityHandler"></a>1.WebSecurityHandler</h6><ul><li>```java<br>public class WebSecurityHandler implements HandlerInterceptor(拦截浏览器请求)<br>//拦截所有请求（对所有方法请求进行限流）  <figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nim"><br><span class="hljs-comment">###### 2.PageableHandlerInterceptor</span><br><br>- ```java<br>  public class <span class="hljs-type">PageableHandlerInterceptor</span> implements <span class="hljs-type">HandlerInterceptor</span> <span class="hljs-meta">&#123;...&#125;</span><br>  <span class="hljs-type">PageUtils</span>.setCurrentPage(new <span class="hljs-type">Page</span>&lt;&gt;(<span class="hljs-type">Long</span>.parseLong(currentPage), <span class="hljs-type">Long</span>.parseLong(pageSize)));<br>  //拦截所有请求（只对含有分页查询的请求进行处理）  <br></code></pre></td></tr></table></figure></li></ul><h6 id="3-JwtAuthenticationTokenFilter"><a href="#3-JwtAuthenticationTokenFilter" class="headerlink" title="3.JwtAuthenticationTokenFilter"></a>3.JwtAuthenticationTokenFilter</h6><ul><li>```java<br>token过滤器  抛出异常只能由spring框架捕获，全局异常处理不会起作用<br>处理方式：添加异常处理 controller 将异常转发给它处理    <figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nim"><br><span class="hljs-comment">###### 4.FilterInvocationSecurityMetadataSourceImpl</span><br><br>- ```java<br>  接口拦截规则（在访问接口时触发）<br>  public <span class="hljs-type">Collection</span>&lt;<span class="hljs-type">ConfigAttribute</span>&gt; getAttributes(<span class="hljs-type">Object</span> <span class="hljs-keyword">object</span>) throws <span class="hljs-type">IllegalArgumentException</span> <span class="hljs-meta">&#123;...&#125;</span><br>  //可判断是否为匿名访问<br></code></pre></td></tr></table></figure></li></ul><h5 id="2-annotation"><a href="#2-annotation" class="headerlink" title="2.annotation"></a>2.annotation</h5><h6 id="1-Valid"><a href="#1-Valid" class="headerlink" title="1.@Valid"></a>1.@Valid</h6><ul><li><strong>一般验证方法参数是否符合自己定义要求</strong> 【通常与注解在对应类中的字段上的**@NotBlank**(message = “xxx”)结合使用】</li></ul><h6 id="2-OptLogAspect-（aspect包下）"><a href="#2-OptLogAspect-（aspect包下）" class="headerlink" title="2.OptLogAspect （aspect包下）"></a>2.OptLogAspect （aspect包下）</h6><ul><li><p>操作日志的切片处理</p></li><li><p>```java<br>@Pointcut(“@annotation(com.minzheng.blog.annotation.OptLog)”)<br>public void optLogPointCut() {}<br>//切入点</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nim"><br>- ```java<br>  @<span class="hljs-type">AfterReturning</span>(value = <span class="hljs-string">&quot;optLogPointCut()&quot;</span>, returning = <span class="hljs-string">&quot;keys&quot;</span>)<br>  @<span class="hljs-type">SuppressWarnings</span>(<span class="hljs-string">&quot;unchecked&quot;</span>)<br>  public <span class="hljs-type">void</span> saveOptLog(<span class="hljs-type">JoinPoint</span> joinPoint, <span class="hljs-type">Object</span> keys) <span class="hljs-meta">&#123;...&#125;</span><br>  //方法执行完后，执行该方法<br></code></pre></td></tr></table></figure></li></ul><h6 id="3-OptLog（annotation包下）"><a href="#3-OptLog（annotation包下）" class="headerlink" title="3.OptLog（annotation包下）"></a>3.OptLog（annotation包下）</h6><ul><li>操作日志的注解</li></ul><h5 id="3-async"><a href="#3-async" class="headerlink" title="3.async"></a>3.async</h5><h6 id="1-CompletableFuture"><a href="#1-CompletableFuture" class="headerlink" title="1.CompletableFuture"></a>1.CompletableFuture</h6><ol><li>异步编程的接口方法</li><li><strong>CompletableFuture.supplyAsync (function）</strong> 设置为异步函数调用</li></ol><h5 id="4-exception"><a href="#4-exception" class="headerlink" title="4.exception"></a>4.exception</h5><h6 id="1-BizException"><a href="#1-BizException" class="headerlink" title="1.BizException"></a>1.BizException</h6><ul><li>自定义异常处理类</li></ul><h3 id="2-登录模块"><a href="#2-登录模块" class="headerlink" title="2.登录模块"></a>2.登录模块</h3><h5 id="1-登录流程（过时）（采用了JWT认证模式）"><a href="#1-登录流程（过时）（采用了JWT认证模式）" class="headerlink" title="1.登录流程（过时）（采用了JWT认证模式）"></a><em>1.登录流程（过时）（采用了JWT认证模式）</em></h5><p>**1.**用户名和密码被过滤器获取到，封装成<code>Authentication</code>,通常情况下是<code>UsernamePasswordAuthenticationToken</code>这个实现类。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">AuthenticationManager`身份管理器负责验证这个`Authentication<br></code></pre></td></tr></table></figure><p>**2.**认证成功后，<code>AuthenticationManager</code>身份管理器返回一个被填充满了信息的（包括上面提到的权限信息，身份信息，细节信息，但密码通常会被移除）<code>Authentication</code>实例。</p><p><strong>3.</strong><code>SecurityContextHolder</code>安全上下文容器将第3步填充了信息的<code>Authentication</code>，通过<code>SecurityContextHolder.getContext().setAuthentication()</code>方法，设置到其中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置中直接接受了登录的url请求，因此直接进行用户信息认证</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityContextPersistenceFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericFilterBean</span> &#123;...&#125;<span class="hljs-comment">//设置上下文（过时）</span><br><span class="hljs-number">1.</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UsernamePasswordAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAuthenticationProcessingFilter</span> &#123;...&#125;<br><span class="hljs-number">2.</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;....&#125;<span class="hljs-comment">//用户信息认证</span><br><span class="hljs-comment">//（1）1之后底层调用SecurityContextHolder.getContext().setAuthentication()方法</span><br><span class="hljs-comment">//（2）UserUtils工具类会获取上下文中的用户信息</span><br><span class="hljs-number">3.</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationSuccessHandlerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span>&#123;...&#125;<span class="hljs-comment">//用户信息认证成功处理</span><br><span class="hljs-number">4.</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccessDecisionManagerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDecisionManager</span>&#123;...&#125;<span class="hljs-comment">//根据用户权限，开放请求</span><br></code></pre></td></tr></table></figure><h5 id="2-JWT认证模式"><a href="#2-JWT认证模式" class="headerlink" title="2.JWT认证模式"></a><em>2.JWT认证模式</em></h5><h6 id="1-自定义过滤器"><a href="#1-自定义过滤器" class="headerlink" title="1.自定义过滤器"></a>1.自定义过滤器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationTokenFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h6 id="2-取消了两个过滤器"><a href="#2-取消了两个过滤器" class="headerlink" title="2.取消了两个过滤器"></a>2.取消了两个过滤器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SecurityContextPersistenceFilter 与 UsernamePasswordAuthenticationFilter<br></code></pre></td></tr></table></figure><h6 id="3-具体的大致流程"><a href="#3-具体的大致流程" class="headerlink" title="3.具体的大致流程"></a>3.具体的大致流程</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>(自定义认证过滤器)JwtAuthenticationTokenFilter<br><span class="hljs-number">2.</span>(接口拦截规则)FilterInvocationSecurityMetadataSourceImpl(非白名单访问经过)<br><span class="hljs-number">3.</span>(用户登录认证)UserDetailsServiceImpl（登录）<br><span class="hljs-number">4.</span>(管理session)SessionRegistryImpl【SessionRegistry】<br>    <span class="hljs-number">4.1</span>.调用registerNewSession(String sessionId, Object principal)(登录)<br>    【根据传入的sessionId（(<span class="hljs-number">3</span>)后自动生成）与注册信息注册session对象】<br>    <span class="hljs-number">4.2</span>.调用removeSessionInformation(String sessionId)（手动注销）删除session<br><span class="hljs-number">5.</span>(登录成功)AuthenticationSuccessHandlerImpl(登录)<br></code></pre></td></tr></table></figure><h3 id="3-Redis存储模块"><a href="#3-Redis存储模块" class="headerlink" title="3.Redis存储模块"></a>3.Redis存储模块</h3><h5 id="1-出现Java序列化异常：大概率是存储的类出现无法序列的属性对象"><a href="#1-出现Java序列化异常：大概率是存储的类出现无法序列的属性对象" class="headerlink" title="1.出现Java序列化异常：大概率是存储的类出现无法序列的属性对象"></a>1.出现Java序列化异常：大概率是存储的类出现无法序列的属性对象</h5><ul><li><p>例如权限对象：（将其取消序列化即可）</p></li><li><p>```java<br>@JSONField(serialize = false)<br>List<GrantedAuthority> authorities;</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>##### <span class="hljs-number">2.</span>各key值的含义<br><br>###### <span class="hljs-number">1.</span>【unique_visitor】：通过识别ip保存登录游客的登录信息的Set集合  每天定时存储与清除<br><br>###### <span class="hljs-number">2.</span>【blog_views_count】：用户(游客)访问博客次数（每个游客只记录一次）<br><br>###### <span class="hljs-number">3.</span>【login:id】：用户登录token<br><br>###### <span class="hljs-number">4.</span>【website_config】：网站配置<br><br>###### <span class="hljs-number">5.</span>【visitor_area】： 游客地区信息 【 哈希集合】 <br><br>###### <span class="hljs-number">6.</span>【user_area】：用户地区信息<br><br>### <span class="hljs-number">4.</span>菜单模块<br><br>##### <span class="hljs-number">1.</span>登录成功发送请求<br><br>```javascript<br><span class="hljs-number">1.</span> /admin/user/menus  :获取当前用户状态下的所有菜单选项<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-网站信息模块"><a href="#5-网站信息模块" class="headerlink" title="5.网站信息模块"></a>5.网站信息模块</h3><h5 id="1-接口："><a href="#1-接口：" class="headerlink" title="1.接口：/"></a>1.接口：/</h5><ul><li>```json<br>//获取该网站的基本信息<br>getBlogHomeInfo(){…}<br>{<pre><code class="hljs">&quot;alipayQRCode&quot;: &quot;https://static.talkxj.com/photos/13d83d77cc1f7e4e0437d7feaf56879f.png&quot;,&quot;gitee&quot;: &quot;&quot;,&quot;github&quot;: &quot;&quot;,&quot;isChatRoom&quot;: 1,&quot;isCommentReview&quot;: 0,&quot;isEmailNotice&quot;: 1,&quot;isMessageReview&quot;: 0,&quot;isMusicPlayer&quot;: 1,&quot;isReward&quot;: 1,&quot;qq&quot;: &quot;&quot;,&quot;socialLoginList&quot;: [    &quot;qq&quot;,    &quot;weibo&quot;],&quot;socialUrlList&quot;: [    &quot;qq&quot;,    &quot;github&quot;,    &quot;gitee&quot;],&quot;touristAvatar&quot;: &quot;https://static.talkxj.com/photos/0bca52afdb2b9998132355d716390c9f.png&quot;,&quot;userAvatar&quot;: &quot;https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg&quot;,&quot;websiteAuthor&quot;: &quot;网站作者&quot;,&quot;websiteAvatar&quot;: &quot;https://static.talkxj.com/config/43a07ac1ca201143f7b938d0791124fc.png&quot;,&quot;websiteCreateTime&quot;: &quot;2019-12-10&quot;,&quot;websiteIntro&quot;: &quot;网站简介&quot;,&quot;websiteName&quot;: &quot;个人博客&quot;,&quot;websiteNotice&quot;: &quot;请前往后台管理-&gt;系统管理-&gt;网站管理处修改信息&quot;,&quot;websiteRecordNo&quot;: &quot;备案号&quot;,&quot;websocketUrl&quot;: &quot;ws://127.0.0.1:8080/websocket&quot;,&quot;weiXinQRCode&quot;: &quot;https://static.talkxj.com/photos/4f767ef84e55ab9ad42b2d20e51deca1.png&quot;</code></pre>}<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>##### <span class="hljs-number">2.</span>记录游客接口:/report<br><br>- ```<br>  保存用户的信息的接口<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-HOME模块"><a href="#6-HOME模块" class="headerlink" title="6.HOME模块"></a>6.HOME模块</h3><h5 id="1-会接受两个请求"><a href="#1-会接受两个请求" class="headerlink" title="1.会接受两个请求"></a>1.会接受两个请求</h5><ul><li><p>```java<br>/admin/users/area  ：获取用户或者游客登录的area信息<br>/api/admin           ：获取home界面的可视化必要数据    </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><span class="hljs-comment">### 7.文章管理模块</span><br><br><span class="hljs-comment">##### 1.article</span><br><br>- ```java<br>  搜索分类列表请求  <span class="hljs-regexp">/api/</span>admin<span class="hljs-regexp">/categories/</span>search <br>  搜索标签列表请求  <span class="hljs-regexp">/api/</span>admin<span class="hljs-regexp">/categories/</span>search<br></code></pre></td></tr></table></figure></li><li><p>```java<br>保存封面<br>1.调用 strategy(策略)包下的UploadStrategyContext（上传策略上下文）的executeUploadStrategy方法<br>2.调用了UploadStrategy（策略接口）  该接口由抽象类(AbstractUploadStrategyImpl)来实现<br>3.实现类为oss与local模式的上传方法 </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>- ```java<br>  保存文章 /api/admin/articles  （该方法会被记录下来）<br>  <span class="hljs-number">1.</span>异步调用网站相关信息   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CompletableFuture</span>.</span></span>supply<span class="hljs-constructor">Async(<span class="hljs-operator">...</span>)</span><br>  <span class="hljs-number">2.</span>保存文章分类      save<span class="hljs-constructor">ArticleCategory(<span class="hljs-params">articleVO</span>)</span><br>  <span class="hljs-number">3.</span>保存或修改文章     this.save<span class="hljs-constructor">OrUpdate(<span class="hljs-params">article</span>)</span>;    <br>  <span class="hljs-number">4.</span>保存文章标签列表（较为复杂）       save<span class="hljs-constructor">ArticleTag(<span class="hljs-params">articleVO</span>, <span class="hljs-params">article</span>.<span class="hljs-params">getId</span>()</span>);<br></code></pre></td></tr></table></figure></li></ul><h5 id="2-articleList"><a href="#2-articleList" class="headerlink" title="2.articleList"></a>2.articleList</h5><ul><li>```java<br>在后台查看文章列表  /api/admin/articles<br>public Result&lt;PageResult<ArticleBackDTO>&gt; listArticleBacks(ConditionVO conditionVO) {…}<br>–&gt;// 查询文章总量  <pre><code class="hljs">articleDao.countArticleBacks(condition); 自定义sql</code></pre>–&gt;// 查询后台文章<pre><code class="hljs">articleDao.listArticleBacks(PageUtils.getLimitCurrent(), PageUtils.getSize(), condition); 自定义sql</code></pre><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><span class="hljs-comment">### 8.角色模块</span><br><br>- ```java<br>              <span class="hljs-regexp">/api/</span>admin<span class="hljs-regexp">/users/</span>roles   查询用户角色列表    RoleController<br>              <span class="hljs-regexp">/api/</span>admin<span class="hljs-regexp">/role/</span>resources  查看角色资源选项  ResourceController<br>  listResourceOption() --&gt;listResourceOption() --&gt;模块与资源的数据整合<br>      <span class="hljs-regexp">/api/</span>admin<span class="hljs-regexp">/role/m</span>enus  查看角色菜单选项  MenuController<br></code></pre></td></tr></table></figure></li></ul><h3 id="9-用户模块"><a href="#9-用户模块" class="headerlink" title="9.用户模块"></a>9.用户模块</h3><ul><li><p>```java<br>/api/admin/users/online   查询在线用户  listOnlineUsers(){…}<br>@其中—&gt;sessionRegistry(sercurity对象)==会获取之前的用户登录而保存的用户(<UserDetailDto>)信息列表（同一会话中）</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br># <span class="hljs-number">3</span>.数据库<br><br>### <span class="hljs-number">1</span>.菜单mapper<br><br>- ```sql<br>  //根据用户id和角色查询菜单<br>  SELECT DISTINCT<br>              m.id,<br>              `name`,<br>              `path`,<br><span class="hljs-built_in">              component,</span><br><span class="hljs-built_in">              icon,</span><br><span class="hljs-built_in">              is_hidden,</span><br><span class="hljs-built_in">              parent_id,</span><br>              order_num<br>           FROM<br>              tb_user_role ur<br>              JOIN tb_role_menu rm ON ur.role_id = rm.role_id<br>              JOIN `tb_menu` m ON rm.menu_id = m.id<br>           WHERE<br>              user_id = #&#123;userInfoId&#125;<br></code></pre></td></tr></table></figure></li><li><p>联表查询：<strong>tb_user_role</strong>、<strong>tb_role_menu</strong>、<strong>tb_menu</strong></p></li></ul><h3 id="2-文章mapper"><a href="#2-文章mapper" class="headerlink" title="2.文章mapper"></a>2.文章mapper</h3><ul><li>```sql<br>//按天查询文章统计量<select id="listArticleStatistics" resultType="com.minzheng.blog.dto.ArticleStatisticsDTO">        SELECT            DATE_FORMAT( create_time, "%Y-%m-%d" ) AS date,  //对时间格式化            COUNT(1) AS count  //注意：这里与count(*)效果相差不大        FROM            tb_article        GROUP BY            date   //按时间分组计时（按天）        ORDER BY            date DESC</select><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><br>- ```sql<br>  //在后台查询文章列表<br>  //一表内嵌查询，三表联合查询：tb_article  【tb_category 、tb_article_tag 、tb_tag】<br>  &lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;listArticleBacks&quot;</span> resultMap=<span class="hljs-string">&quot;articleBackResultMap&quot;</span>&gt;<br>      <span class="hljs-keyword">SELECT</span><br>      a.id,<br>      article_cover,<br>      article_title,<br>      <span class="hljs-built_in">type</span>,<br>      is_top,<br>      a.is_delete,<br>      a.status,<br>      a.create_time,<br>      category_name,<br>      t.id <span class="hljs-keyword">AS</span> tag_id,<br>      t.tag_name<br>      <span class="hljs-keyword">FROM</span><br>      (<br>      <span class="hljs-keyword">SELECT</span><br>      id,<br>      article_cover,<br>      article_title,<br>      <span class="hljs-built_in">type</span>,<br>      is_top,<br>      is_delete,<br>      status,<br>      create_time,<br>      category_id<br>      <span class="hljs-keyword">FROM</span><br>      tb_article<br>      &lt;<span class="hljs-keyword">where</span>&gt;<br>          is_delete = #&#123;condition.isDelete&#125;<br>          &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;condition.keywords != null&quot;</span>&gt;<br>              <span class="hljs-keyword">and</span> article_title <span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;condition.keywords&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)<br>          &lt;/<span class="hljs-keyword">if</span>&gt;<br>          &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;condition.status != null&quot;</span>&gt;<br>              <span class="hljs-keyword">and</span> status = #&#123;condition.status&#125;<br>          &lt;/<span class="hljs-keyword">if</span>&gt;<br>          &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;condition.categoryId != null&quot;</span>&gt;<br>              <span class="hljs-keyword">and</span> category_id = #&#123;condition.categoryId&#125;<br>          &lt;/<span class="hljs-keyword">if</span>&gt;<br>          &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;condition.type != null&quot;</span>&gt;<br>              <span class="hljs-keyword">and</span> <span class="hljs-built_in">type</span> = #&#123;condition.<span class="hljs-built_in">type</span>&#125;<br>          &lt;/<span class="hljs-keyword">if</span>&gt;<br>          &lt;<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;condition.tagId != null&quot;</span>&gt;<br>              <span class="hljs-keyword">and</span> id <span class="hljs-keyword">in</span><br>               (<br>                <span class="hljs-keyword">SELECT</span><br>                  article_id<br>                <span class="hljs-keyword">FROM</span><br>                  tb_article_tag<br>                <span class="hljs-keyword">WHERE</span><br>                  tag_id = #&#123;condition.tagId&#125;<br>               )<br>          &lt;/<span class="hljs-keyword">if</span>&gt;<br>      &lt;/<span class="hljs-keyword">where</span>&gt;<br>      <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>        is_top <span class="hljs-keyword">DESC</span>,<br>        id <span class="hljs-keyword">DESC</span><br>      <span class="hljs-keyword">LIMIT</span> #&#123;current&#125;,#&#123;size&#125;<br>      ) a<br>      <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> tb_category c <span class="hljs-keyword">ON</span> a.category_id = c.id<br>      <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> tb_article_tag atg <span class="hljs-keyword">ON</span> a.id = atg.article_id<br>      <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> tb_tag t <span class="hljs-keyword">ON</span> t.id = atg.tag_id<br>      <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>        is_top <span class="hljs-keyword">DESC</span>,<br>        a.id <span class="hljs-keyword">DESC</span><br>  &lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-分类mapper"><a href="#3-分类mapper" class="headerlink" title="3.分类mapper"></a>3.分类mapper</h3><ul><li>```sql<br>//  按文章查询所属分类总数<select id="listCategoryDTO" resultType="com.minzheng.blog.dto.CategoryDTO">        SELECT          c.id,          c.category_name,          COUNT( a.id ) AS article_count   //按文章主键计数        FROM          tb_category c          LEFT JOIN ( SELECT id, category_id FROM tb_article WHERE is_delete = 0 AND `status` = 1 ) a ON c.id = a.category_id        GROUP BY          c.id //按文章主键分组</select><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>- ```<span class="hljs-keyword">sql</span><br>  // 查询分类 【联合:文章表】<br>  &lt;<span class="hljs-keyword">select</span> id=&quot;listCategoryBackDTO&quot; resultType=&quot;com.minzheng.blog.dto.CategoryBackDTO&quot;&gt;<br>  <span class="hljs-keyword">SELECT</span><br>    c.id,<br>    c.category_name,<br>    COUNT( a.id ) <span class="hljs-keyword">AS</span> article_count,  //count会合并相同a.id的数据<br>    c.create_time<br>  <span class="hljs-keyword">FROM</span><br>    tb_category c<br>    <span class="hljs-keyword">LEFT JOIN</span> tb_article a <span class="hljs-keyword">ON</span> c.id = a.category_id<br>  &lt;<span class="hljs-keyword">where</span>&gt;<br>  &lt;<span class="hljs-keyword">if</span> test=&quot;condition.keywords != null&quot;&gt;<br>       category_name <span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;condition.keywords&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)<br>  &lt;/<span class="hljs-keyword">if</span>&gt;<br>  &lt;/<span class="hljs-keyword">where</span>&gt;<br>  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>    c.id<br>  <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    c.id <span class="hljs-keyword">DESC</span><br>          <span class="hljs-keyword">LIMIT</span> #&#123;<span class="hljs-keyword">current</span>&#125;,#&#123;size&#125;<br>   &lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-评论mapper"><a href="#4-评论mapper" class="headerlink" title="4.评论mapper"></a>4.评论mapper</h3><ul><li>```sql<br>//后台返回所有评论信息  （左连接则会产生左表字段均会显现，但右表只显现两表连接条件相同的结果，不匹配则为null）<select id="listCommentBackDTO" resultType="com.minzheng.blog.dto.CommentBackDTO">        SELECT         c.id,         u.avatar,         u.nickname,         r.nickname AS reply_nickname,         a.article_title,         c.comment_content,         c.type,         c.create_time,         c.is_review        FROM         tb_comment c                                         //评论表         LEFT JOIN tb_article a ON c.topic_id = a.id          //文章相关id         LEFT JOIN tb_user_info u ON c.user_id = u.id         //评论用户id         LEFT JOIN tb_user_info r ON c.reply_user_id = r.id   //回复用户id       <where>           <if test="condition.type != null">               c.type = #{condition.type}           </if>           <if test="condition.isReview != null">              and c.is_review = #{condition.isReview}           </if>            <if test="condition.keywords != null">              and u.nickname like concat('%',#{condition.keywords},'%')            </if>        </where>        ORDER BY          id DESC        LIMIT #{current},#{size}</select><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>### <span class="hljs-number">5.</span>角色mapper<br><br>- ```<span class="hljs-keyword">sql</span><br>  //三表查询   mybatis 会自动封装查询到的结果   rr.resource_id, rm.menu_id （列表集合）<br>  &lt;<span class="hljs-keyword">select</span> id=&quot;listRoles&quot; resultMap=&quot;RoleMap&quot;&gt;<br>          <span class="hljs-keyword">SELECT</span><br>          r.id,<br>          role_name,<br>          role_label,<br>          r.create_time,<br>          r.is_disable,<br>          rr.resource_id,<br>          rm.menu_id<br>          <span class="hljs-keyword">FROM</span><br>          (<br>            <span class="hljs-keyword">SELECT</span><br>              id,<br>              role_name,<br>              role_label,<br>              create_time,<br>              is_disable<br>            <span class="hljs-keyword">FROM</span><br>              tb_role   //角色表<br>          &lt;<span class="hljs-keyword">where</span>&gt;<br>              &lt;<span class="hljs-keyword">if</span> test=&quot;conditionVO.keywords != null &quot;&gt;<br>                  role_name <span class="hljs-keyword">like</span> concat(<span class="hljs-string">&#x27;%&#x27;</span>,#&#123;conditionVO.keywords&#125;,<span class="hljs-string">&#x27;%&#x27;</span>)<br>              &lt;/<span class="hljs-keyword">if</span>&gt;<br>          &lt;/<span class="hljs-keyword">where</span>&gt;<br>          <span class="hljs-keyword">LIMIT</span> #&#123;<span class="hljs-keyword">current</span>&#125;, #&#123;size&#125;<br>          ) r<br>          <span class="hljs-keyword">LEFT JOIN</span> tb_role_resource rr <span class="hljs-keyword">ON</span> r.id = rr.role_id  //角色资源表<br>          <span class="hljs-keyword">LEFT JOIN</span> tb_role_menu rm <span class="hljs-keyword">on</span> r.id = rm.role_id      //角色菜单表<br>          <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> r.id<br>      &lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2022/12/06/test/"/>
    <url>/2022/12/06/test/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA-NO-1"><a href="#JAVA-NO-1" class="headerlink" title="JAVA  NO_1"></a>JAVA  NO_1</h1><h3 id="Test博客"><a href="#Test博客" class="headerlink" title="Test博客"></a>Test博客</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/06/hello-world/"/>
    <url>/2022/12/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;test&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
